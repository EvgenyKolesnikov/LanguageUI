//
//  UserDictionaryModels.swift
//  English
//
//  Created by –ñ–µ–Ω—è –ö on 16.07.2025.
//

import Foundation

// –ú–æ–¥–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
struct UserDictionaryResponse: Codable {
    let words: [String: String]
}

// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–ª–æ–≤–∞—Ä–µ–º
class UserDictionaryService {
    static let shared = UserDictionaryService()
    
    private init() {}
    
    func fetchUserDictionary() async throws -> [String: String] {
        guard let url = URL(string: "\(API.baseURL)/api/Profile/UserDictionary") else {
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL: \(API.baseURL)/api/Profile/UserDictionary")
            throw URLError(.badURL)
        }
        
        let token = AuthManager.shared.getTokenFromKeychain() ?? ""
        if token.isEmpty {
            print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Keychain")
            throw URLError(.userAuthenticationRequired)
        }
        
        print("üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞: \(url)")
        print("üîë –¢–æ–∫–µ–Ω: \(String(token.prefix(20)))...")
        
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Accept")
        
        do {
            let (data, response) = try await URLSession.shared.data(for: request)
            
            guard let httpResponse = response as? HTTPURLResponse else {
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HTTP –æ—Ç–≤–µ—Ç")
                throw URLError(.badServerResponse)
            }
            
            print("üì° HTTP Status: \(httpResponse.statusCode)")
            
            if httpResponse.statusCode != 200 {
                let responseString = String(data: data, encoding: .utf8) ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: \(responseString)")
                throw URLError(.badServerResponse)
            }
            
            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if let jsonString = String(data: data, encoding: .utf8) {
                print("üìÑ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π JSON: \(jsonString)")
            }
            
            let decoder = JSONDecoder()
            
            // –ü–∞—Ä—Å–∏–º –∫–∞–∫ –º–∞—Å—Å–∏–≤ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
            let responseArray = try decoder.decode([UserDictionaryResponse].self, from: data)
            let words = responseArray.first?.words ?? [:]
            
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å–ª–æ–≤: \(words.count)")
            return words
            
        } catch let decodingError as DecodingError {
            print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: \(decodingError)")
            throw decodingError
        } catch {
            print("‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: \(error)")
            throw error
        }
    }
} 