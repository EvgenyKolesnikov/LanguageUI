//
//  Exer—ÅiseOneViewController.swift
//  English
//
//  Created by –ñ–µ–Ω—è –ö on 12.07.2025.
//

import UIKit

class TextSwipeCollectionViewController: UIViewController {
    
    let texts = [
        "The sun shines brightly in the blue sky. Birds are singing in the green trees. A small river flows quietly through the valley. Everything looks peaceful and beautiful.",
        "I wake up at 7 o'clock every morning. First, I brush my teeth and take a shower. Then I eat breakfast with my family. After that, I go to work or school.",
        "Dogs are loyal and friendly animals. They love playing with their owners. Many dogs can learn different commands. Cats are more independent but also make great pets.",
        "London is a big and interesting city. There are many famous places to visit. The weather is often rainy but not very cold. I would like to go there one day."
    ]
    
    // –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    let translations: [String: String] = [
        // –ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç
        "The": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫–ª—å",
        "sun": "—Å–æ–ª–Ω—Ü–µ",
        "shines": "—Å–≤–µ—Ç–∏—Ç",
        "brightly": "—è—Ä–∫–æ",
        "in": "–≤",
        "the": "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫–ª—å",
        "blue": "—Å–∏–Ω–∏–π",
        "sky": "–Ω–µ–±–æ",
        "Birds": "–ø—Ç–∏—Ü—ã",
        "are": "–µ—Å—Ç—å/—è–≤–ª—è—é—Ç—Å—è",
        "singing": "–ø–æ—é—Ç",
        "green": "–∑–µ–ª–µ–Ω—ã–π",
        "trees": "–¥–µ—Ä–µ–≤—å—è",
        "A": "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫–ª—å",
        "small": "–º–∞–ª–µ–Ω—å–∫–∏–π",
        "river": "—Ä–µ–∫–∞",
        "flows": "—Ç–µ—á–µ—Ç",
        "quietly": "—Ç–∏—Ö–æ",
        "through": "—á–µ—Ä–µ–∑",
        "valley": "–¥–æ–ª–∏–Ω–∞",
        "Everything": "–≤—Å–µ",
        "looks": "–≤—ã–≥–ª—è–¥–∏—Ç",
        "peaceful": "—Å–ø–æ–∫–æ–π–Ω—ã–π",
        "and": "–∏",
        "beautiful": "–∫—Ä–∞—Å–∏–≤—ã–π",
        
        // –í—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç
        "I": "—è",
        "wake": "–ø—Ä–æ—Å—ã–ø–∞—é—Å—å",
        "up": "–≤–≤–µ—Ä—Ö",
        "at": "–≤",
        "7": "—Å–µ–º—å",
        "o'clock": "—á–∞—Å–æ–≤",
        "every": "–∫–∞–∂–¥—ã–π",
        "morning": "—É—Ç—Ä–æ",
        "First": "—Å–Ω–∞—á–∞–ª–∞",
        "brush": "—á–∏—â—É",
        "my": "–º–æ–π",
        "teeth": "–∑—É–±—ã",
        "take": "–ø—Ä–∏–Ω–∏–º–∞—é",
        "shower": "–¥—É—à",
        "Then": "–∑–∞—Ç–µ–º",
        "eat": "–µ–º",
        "breakfast": "–∑–∞–≤—Ç—Ä–∞–∫",
        "with": "—Å",
        "family": "—Å–µ–º—å—è",
        "After": "–ø–æ—Å–ª–µ",
        "that": "—Ç–æ–≥–æ",
        "go": "–∏–¥—É",
        "to": "–∫",
        "work": "—Ä–∞–±–æ—Ç–∞",
        "or": "–∏–ª–∏",
        "school": "—à–∫–æ–ª–∞",
        
        // –¢—Ä–µ—Ç–∏–π —Ç–µ–∫—Å—Ç
        "Dogs": "—Å–æ–±–∞–∫–∏",
        "loyal": "–≤–µ—Ä–Ω—ã–π",
        "friendly": "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
        "animals": "–∂–∏–≤–æ—Ç–Ω—ã–µ",
        "They": "–æ–Ω–∏",
        "love": "–ª—é–±—è—Ç",
        "playing": "–∏–≥—Ä–∞—Ç—å",
        "their": "–∏—Ö",
        "owners": "—Ö–æ–∑—è–µ–≤–∞",
        "Many": "–º–Ω–æ–≥–∏–µ",
        "can": "–º–æ–≥—É—Ç",
        "learn": "—É—á–∏—Ç—å—Å—è",
        "different": "—Ä–∞–∑–Ω—ã–µ",
        "commands": "–∫–æ–º–∞–Ω–¥—ã",
        "Cats": "–∫–æ—à–∫–∏",
        "more": "–±–æ–ª–µ–µ",
        "independent": "–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π",
        "but": "–Ω–æ",
        "also": "—Ç–∞–∫–∂–µ",
        "make": "–¥–µ–ª–∞—é—Ç",
        "great": "–æ—Ç–ª–∏—á–Ω—ã–µ",
        "pets": "–ø–∏—Ç–æ–º—Ü—ã",
        
        // –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ç–µ–∫—Å—Ç
        "London": "–õ–æ–Ω–¥–æ–Ω",
        "big": "–±–æ–ª—å—à–æ–π",
        "interesting": "–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π",
        "city": "–≥–æ—Ä–æ–¥",
        "There": "—Ç–∞–º",
        "many": "–º–Ω–æ–≥–æ",
        "famous": "–∏–∑–≤–µ—Å—Ç–Ω—ã–µ",
        "places": "–º–µ—Å—Ç–∞",
        "visit": "–ø–æ—Å–µ—Ç–∏—Ç—å",
        "weather": "–ø–æ–≥–æ–¥–∞",
        "often": "—á–∞—Å—Ç–æ",
        "rainy": "–¥–æ–∂–¥–ª–∏–≤–∞—è",
        "not": "–Ω–µ",
        "very": "–æ—á–µ–Ω—å",
        "cold": "—Ö–æ–ª–æ–¥–Ω–∞—è",
        "would": "–±—ã",
        "like": "—Ö–æ—Ç–µ–ª –±—ã",
        "there": "—Ç–∞–º",
        "one": "–æ–¥–∏–Ω",
        "day": "–¥–µ–Ω—å"
    ]
    
    private lazy var collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        layout.minimumLineSpacing = 0
        
        let cv = UICollectionView(frame: .zero, collectionViewLayout: layout)
        cv.isPagingEnabled = true
        cv.showsHorizontalScrollIndicator = false
        cv.register(TextCell.self, forCellWithReuseIdentifier: "TextCell")
        cv.dataSource = self
        cv.delegate = self
        cv.translatesAutoresizingMaskIntoConstraints = false
        return cv
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupViews()
    }
    
    private func setupViews() {
        view.addSubview(collectionView)
        
        NSLayoutConstraint.activate([
            collectionView.topAnchor.constraint(equalTo: view.topAnchor),
            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        ])
    }
}

extension TextSwipeCollectionViewController: UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return texts.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "TextCell", for: indexPath) as! TextCell
        cell.configure(with: texts[indexPath.item], translations: translations)
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView,
                       layout collectionViewLayout: UICollectionViewLayout,
                       sizeForItemAt indexPath: IndexPath) -> CGSize {
        return collectionView.frame.size
    }
}

class TextCell: UICollectionViewCell {
    
    let textView: UITextView = {
        let textView = UITextView()
        textView.isEditable = false
        textView.isSelectable = false
        textView.isScrollEnabled = false
        textView.backgroundColor = .clear
        textView.textAlignment = .center
        textView.font = UIFont.systemFont(ofSize: 25)
        textView.textColor = UIColor.black
        textView.translatesAutoresizingMaskIntoConstraints = false
        return textView
    }()
    
    var translations: [String: String] = [:]
    
    // –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    private lazy var translationPopup: UIView = {
        let popup = UIView()
        popup.backgroundColor = UIColor.systemBackground
        popup.layer.cornerRadius = 12
        popup.layer.shadowColor = UIColor.black.cgColor
        popup.layer.shadowOffset = CGSize(width: 0, height: 2)
        popup.layer.shadowOpacity = 0.3
        popup.layer.shadowRadius = 8
        popup.isHidden = true
        popup.translatesAutoresizingMaskIntoConstraints = false
        return popup
    }()
    
    private lazy var wordLabel: UILabel = {
        let label = UILabel()
        label.font = UIFont.boldSystemFont(ofSize: 20)
        label.textColor = UIColor.label
        label.textAlignment = .center
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private lazy var translationLabel: UILabel = {
        let label = UILabel()
        label.font = UIFont.systemFont(ofSize: 18)
        label.textColor = UIColor.secondaryLabel
        label.textAlignment = .center
        label.numberOfLines = 0
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private lazy var closeButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("‚úï", for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 20, weight: .medium)
        button.setTitleColor(UIColor.secondaryLabel, for: .normal)
        button.addTarget(self, action: #selector(hideTranslationPopup), for: .touchUpInside)
        button.translatesAutoresizingMaskIntoConstraints = false
        return button
    }()
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        setupViews()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    private func setupViews() {
        contentView.addSubview(textView)
        contentView.addSubview(translationPopup)
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ popup –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
        contentView.bringSubviewToFront(translationPopup)
        
        print("üèóÔ∏è Popup —Å–æ–∑–¥–∞–Ω: \(translationPopup.frame)")
        print("üèóÔ∏è Popup —Å–∫—Ä—ã—Ç: \(translationPopup.isHidden)")
        
        translationPopup.addSubview(wordLabel)
        translationPopup.addSubview(translationLabel)
        translationPopup.addSubview(closeButton)
        
        NSLayoutConstraint.activate([
            textView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),
            textView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            textView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            textView.heightAnchor.constraint(lessThanOrEqualTo: contentView.heightAnchor, constant: -40),
            
            // –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
            translationPopup.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            translationPopup.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            translationPopup.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -80),
            translationPopup.heightAnchor.constraint(greaterThanOrEqualToConstant: 80),
            
            // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            closeButton.topAnchor.constraint(equalTo: translationPopup.topAnchor, constant: 16),
            closeButton.trailingAnchor.constraint(equalTo: translationPopup.trailingAnchor, constant: -16),
            closeButton.widthAnchor.constraint(equalToConstant: 32),
            closeButton.heightAnchor.constraint(equalToConstant: 32),
            
            // –°–ª–æ–≤–æ
            wordLabel.topAnchor.constraint(equalTo: translationPopup.topAnchor, constant: 16),
            wordLabel.leadingAnchor.constraint(equalTo: translationPopup.leadingAnchor, constant: 16),
            wordLabel.trailingAnchor.constraint(equalTo: closeButton.leadingAnchor, constant: -8),
            
            // –ü–µ—Ä–µ–≤–æ–¥
            translationLabel.topAnchor.constraint(equalTo: wordLabel.bottomAnchor, constant: 8),
            translationLabel.leadingAnchor.constraint(equalTo: translationPopup.leadingAnchor, constant: 16),
            translationLabel.trailingAnchor.constraint(equalTo: translationPopup.trailingAnchor, constant: -16),
            translationLabel.bottomAnchor.constraint(equalTo: translationPopup.bottomAnchor, constant: -16)
        ])
        
        let tap = UITapGestureRecognizer(target: self, action: #selector(handleTextTap(_:)))
        textView.addGestureRecognizer(tap)
    }
    
    func configure(with text: String, translations: [String: String]) {
        self.translations = translations
        textView.text = text
    }
    
    @objc private func handleTextTap(_ gesture: UITapGestureRecognizer) {
        let layoutManager = textView.layoutManager
        var location = gesture.location(in: textView)
        location.x -= textView.textContainerInset.left
        location.y -= textView.textContainerInset.top
        
        let characterIndex = layoutManager.characterIndex(for: location, in: textView.textContainer, fractionOfDistanceBetweenInsertionPoints: nil)
        guard characterIndex < textView.text.count else { return }
        
        let nsText = textView.text as NSString
        let separators = CharacterSet.whitespacesAndNewlines.union(.punctuationCharacters)
        let range = nsText.rangeOfWord(at: characterIndex, separators: separators)
        let word = nsText.substring(with: range)
        let cleanWord = word.trimmingCharacters(in: .punctuationCharacters)
        guard !cleanWord.isEmpty else { return }
        
        var translation = translations[cleanWord]
        if translation == nil {
            translation = translations[cleanWord.lowercased()]
        }
        if translation == nil {
            translation = "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }
        showTranslationPopup(for: cleanWord, translation: translation!)
    }
    
    @objc private func hideTranslationPopup() {
        UIView.animate(withDuration: 0, delay: 0, options: [.curveEaseIn], animations: {
            self.translationPopup.alpha = 0
            self.translationPopup.transform = CGAffineTransform(translationX: 0, y: 10)
        }) { _ in
            self.translationPopup.isHidden = true
        }
    }
    
    private func showTranslationPopup(for word: String, translation: String) {
        print("üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º popup –¥–ª—è —Å–ª–æ–≤–∞: \(word)")
        print("üéØ –ü–µ—Ä–µ–≤–æ–¥: \(translation)")
        
        wordLabel.text = word
        translationLabel.text = translation
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
        translationPopup.isHidden = false
        translationPopup.alpha = 1
        translationPopup.transform = .identity
        
        print("üì± Popup –≤–∏–¥–∏–º–æ—Å—Ç—å: \(translationPopup.isHidden ? "—Å–∫—Ä—ã—Ç" : "–≤–∏–¥–∏–º")")
        print("üì± Popup alpha: \(translationPopup.alpha)")
        print("üì± Popup frame: \(translationPopup.frame)")
        
        // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        translationPopup.transform = CGAffineTransform(translationX: 0, y: 10)
        
        UIView.animate(withDuration: 0.15, delay: 0, options: [.curveEaseOut], animations: {
            self.translationPopup.transform = .identity
        }) { _ in
            print("‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è popup –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π extension –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
extension NSString {
    func rangeOfWord(at index: Int, separators: CharacterSet) -> NSRange {
        let length = self.length
        guard length > 0, index < length else { return NSRange(location: 0, length: 0) }
        var start = index
        var end = index
        while start > 0 && !separators.contains(UnicodeScalar(character(at: start - 1))!) {
            start -= 1
        }
        while end < length && !separators.contains(UnicodeScalar(character(at: end))!) {
            end += 1
        }
        return NSRange(location: start, length: end - start)
    }
}


